{"version":3,"sources":["components/ContactForm.jsx","components/Filter.jsx","components/ContactList.jsx","App.js","reportWebVitals.js","index.js"],"names":["ContactForm","state","name","number","handleNameChange","event","currentTarget","value","setState","handleNumberChange","onExistingContactAlert","preventDefault","alert","onAddNewContact","this","props","existingContact","getSomeOfName","action","htmlFor","onChange","type","onClick","e","Component","Filter","window","placeholder","filter","handleFilterChange","ContactList","filteredContacts","map","contact","index","onDeleteContact","id","initialState","contacts","App","contactId","prevState","shortId","generate","getFilteredContacts","optimizedFilterName","toLowerCase","includes","optimizedContactName","some","localStorageContacts","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","className","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bce2f821.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass ContactForm extends Component{\r\n    state = {\r\n        name: '',\r\n        number: '+38'\r\n    }\r\n    handleNameChange = (event) => {\r\n        const {name, value} = event.currentTarget\r\n        this.setState({ [name]: value })\r\n        // this.props.getSomeOfName(this.state.name)\r\n    }\r\n    handleNumberChange = (event) => {\r\n        const {name, value} = event.currentTarget\r\n        this.setState({[name]: value})\r\n    }\r\n    onExistingContactAlert = (event) => {\r\n        event.preventDefault()\r\n        this.setState({name: '', number: '+38'})\r\n        alert(this.state.name + ' уже есть в списке контактов')\r\n    }\r\n    \r\n    render() {\r\n        const { onAddNewContact } = this.props\r\n        \r\n        const { name, number } = this.state\r\n        \r\n        const existingContact = this.props.getSomeOfName(name)\r\n    return (\r\n            <form action=\"\">\r\n          <label htmlFor=\"\">\r\n            Name <input\r\n              name='name'\r\n              onChange={this.handleNameChange}\r\n              type=\"text\"\r\n              value={name} />\r\n          </label>\r\n          <label htmlFor=\"\">\r\n            Number <input\r\n              name='number'\r\n              onChange={this.handleNumberChange}\r\n              type=\"tel\"\r\n              value={number} />\r\n          </label>\r\n          <button\r\n                onClick={existingContact ? this.onExistingContactAlert : (e) => {\r\n                    onAddNewContact(e, name, number)\r\n                    this.setState({name: '', number: '+38'})\r\n            }}\r\n            type='submit'>Создать</button>\r\n        </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContactForm;","import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    window.props = props\r\n    return (\r\n        <label htmlFor=\"\">\r\n          <input\r\n            name='filter'\r\n            type='text'\r\n            placeholder='Search contacts'\r\n            value={props.filter}\r\n            onChange={props.handleFilterChange}\r\n          />\r\n        </label>\r\n    )\r\n}\r\n\r\n\r\nexport default Filter;","import React from 'react';\r\n\r\nconst ContactList = (props) => {\r\n    return (\r\n        props.filteredContacts.map((contact, index) => {\r\n            return (\r\n              <li key={contact.id}>\r\n                <p>{index + 1 + ') ' + contact.name + \" : \" + contact.number}</p>\r\n                <button onClick={() => props.onDeleteContact(contact.id)} type='button'>Удалить</button>\r\n              </li>\r\n            )\r\n          })\r\n    )\r\n}\r\n\r\nexport default ContactList;","// import logo from './logo.svg';\nimport './App.css';\nimport React from 'react'\nimport { Component } from 'react';\nimport shortId from 'shortid'\nimport ContactForm from './components/ContactForm'\nimport Filter from './components/Filter'\nimport ContactList from './components/ContactList'\n\nconst initialState = {\n  contacts: [],\n  filter: ''\n}\n\nclass App extends Component {\n\n  state = {\n    ...initialState,\n    contacts: [...initialState.contacts]\n  }\n\n  componentDidMount() {\n    const localStorageContacts = localStorage.getItem('contacts')\n    const parsedContacts = JSON.parse(localStorageContacts)\n    if (parsedContacts) {\n      this.setState({contacts: parsedContacts})\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\n    }\n  }\n  handleFilterChange = (event) => {\n    const { name, value } = event.currentTarget\n    this.setState({[name]: value})\n  }\n\n  onDeleteContact = (contactId) => {\n    this.setState(prevState => ({\n      ...prevState,\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId)\n    }))\n  }\n  onAddNewContact  = (event, name, number) => {\n    event.preventDefault();\n    this.setState(({ contacts }) => ({\n      ...this.state,\n      contacts: [...contacts, {\n        id: shortId.generate(),\n        name,\n        number,\n      }]\n    }))\n  }\n\n  getFilteredContacts = () => {\n    const { filter, contacts } = this.state;\n    const optimizedFilterName = filter.toLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(optimizedFilterName));\n  }\n\n\n  getSomeOfName = (name) => {\n    const optimizedContactName = name.toLowerCase();\n    return this.state.contacts.some(contact => contact.name.toLowerCase() === optimizedContactName)\n  }\n\n  render() {\n    const filteredContacts = this.getFilteredContacts()\n    // const existingContact = this.getSomeOfName()\n    \n    return (\n    <div className=\"App\">\n        <h1>PhoneBook</h1>\n        <ContactForm\n          handleNameChange={this.handleNameChange}\n          handleNumberChange={this.handleNumberChange}\n          onExistingContactAlert={this.onExistingContactAlert}\n          onAddNewContact={this.onAddNewContact}\n          getSomeOfName={this.getSomeOfName}\n          // existingContact={existingContact}\n        />\n        <h2>Contacts</h2>\n        <Filter\n          handleFilterChange={this.handleFilterChange}\n          filter={this.state.filter}\n        />\n        <ul>\n        { this.state.contacts.length \n            ? <ContactList\n              filteredContacts={filteredContacts}\n              onDeleteContact={this.onDeleteContact}\n            />\n            : <li key={shortId.generate()}>\n                <p>No saved contacts yet</p>\n              </li>\n          }\n          </ul>\n    </div>\n  )\n  } \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}